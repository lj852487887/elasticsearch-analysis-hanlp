buildscript {
    repositories {
        mavenLocal()
        maven {
            url 'https://maven.aliyun.com/repository/public/'
        }
    }
    dependencies {
        classpath "org.elasticsearch.gradle:build-tools:${elasticsearchVersion}"
        classpath "org.elasticsearch:elasticsearch:7.16.2"
        classpath "org.elasticsearch:elasticsearch-core:7.16.2"
        classpath "org.apache.logging.log4j:log4j-core:2.17.0"
        classpath "org.elasticsearch.test:framework:7.16.2"
        classpath "org.locationtech.spatial4j:spatial4j:0.7"
        classpath "org.locationtech.jts:jts-core:1.15.0"
        classpath 'com.hankcs:hanlp:portable-1.7.8'
        classpath 'commons-codec:commons-codec:1.15'
        classpath 'commons-logging:commons-logging:1.2'
        classpath 'org.apache.httpcomponents:httpclient:4.5.13'
        classpath 'org.apache.httpcomponents:httpcore:4.4.14'
    }
}

allprojects {
    repositories {
        mavenLocal()
        maven {
            url 'https://maven.aliyun.com/repository/public/'
        }
    }
}


group = 'org.elasticsearch'
version = "$elasticsearchVersion"
description = 'elasticsearch-analysis-hanlp'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'elasticsearch.esplugin'

esplugin {
    name 'analysis-hanlp'
    description 'HanLP Analyzer for ElasticSearch'
    classname 'org.elasticsearch.plugin.analysis.hanlp.AnalysisHanLPPlugin'
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}

jar {
    archiveBaseName.set(rootProject.name)
}

//javadocJar {
//    archiveBaseName.set(rootProject.name)
//}

//sourcesJar {
//    archiveBaseName.set(rootProject.name)
//}

assemble {
    doLast {
        file("build/distributions/analysis-hanlp-${elasticsearchVersion}.zip").renameTo(file("build/distributions/${rootProject.name}-${elasticsearchVersion}.zip"))
        ant.checksum file: "build/distributions/${rootProject.name}-${elasticsearchVersion}.zip"
    }
}

configurations.all() {
    Configuration configuration ->
        configuration.resolutionStrategy.failOnVersionConflict()
        configuration.resolutionStrategy.force(['commons-codec:commons-codec:1.15'])
        configuration.resolutionStrategy.force(['commons-logging:commons-logging:1.2'])
        configuration.resolutionStrategy.force(['org.apache.httpcomponents:httpclient:4.5.13'])
        configuration.resolutionStrategy.force(['org.apache.httpcomponents:httpcore:4.4.14'])
}

dependencies {
    compile 'com.hankcs:hanlp:portable-1.7.8'
    compile 'commons-codec:commons-codec:1.15'
    compile 'commons-logging:commons-logging:1.2'
    compile 'org.apache.httpcomponents:httpclient:4.5.13'
    compile 'org.apache.httpcomponents:httpcore:4.4.14'
}

//checkstyle {
//    sourceSets = [project.sourceSets.main]
//}

//checkstyleMain {
//    excludes = ['**/PorterStemmer.java']
//}

//forbiddenApisMain {
//    excludes = [
//            '**/AnalysisHanLPPlugin.class',
//            '**/PorterStemmer.class',
//            '**/RemoteDictConfig.class',
//            '**/DictionaryFileCache.class',
//            '**/ExtMonitor.class',
//            '**/model/*.class',
//            '**/CoreStopWordDictionary.class'
//    ]
//}

//forbiddenPatterns {
//    forbiddenPatterns.enabled = false;
//}

//licenseHeaders {
//    licenseHeaders.enabled = false
//}

//dependencyLicenses {
//    dependencyLicenses.enabled = false
//}

//thirdPartyAudit {
//    thirdPartyAudit.enabled = false
//}

//validateNebulaPom {
//    validateNebulaPom.enabled = false
//}

//loggerUsageCheck {
//    loggerUsageCheck.enabled = false
//}

test {
    systemProperty 'tests.security.manager', 'false'
}

//testingConventions {
//    testingConventions.enabled = false
//}

javadoc {
    enabled = false
}